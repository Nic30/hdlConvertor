from pyMathBitPrecise.array3t import Array3t, Array3val
from pyMathBitPrecise.bits3t import Bits3t, Bits3val, bitsBitOp__ashr, bitsBitOp__lshr, bitsBitOp__ror, bitsBitOp__rol
from pyMathBitPrecise.enum3t import define_Enum3t
from hwtSimApi.basic_hdl_simulator.model import BasicRtlSimModel
from hwtSimApi.basic_hdl_simulator.model_utils import sensitivity, connectSimPort
from hwtSimApi.basic_hdl_simulator.proxy import BasicRtlSimProxy
from hwtSimApi.basic_hdl_simulator.sim_utils import sim_eval_cond

class submodule0(BasicRtlSimModel):
    def __init__(self, sim: "BasicRtlSimulator", name="submodule0"):
        BasicRtlSimModel.__init__(self, sim, name=name)
        # ports
        self.io.a = BasicRtlSimProxy(
            sim, self, "a",
            Bits3t(1, 0), None)
        self.io.b = BasicRtlSimProxy(
            sim, self, "b",
            Bits3t(1, 0), None)
        # internal signals
        # component instances
    def _init_body(self):
        self._hwIOs = (
            self.io.a,
            self.io.b,
        )
        self._processes = (
            self.assig_process_b,
        )
        self._subHwModules = ()
        sensitivity(self.assig_process_b, self.io.a)
        self._outputs[self.assig_process_b] = (
            self.io.b,
        )
        for u in self._subHwModules:
            u._init_body()

    # sensitivity: a
    def assig_process_b(self):
        self.io.b.val_next = (self.io.a.val, 0, )

class SimpleSubunit(BasicRtlSimModel):
    def __init__(self, sim: "BasicRtlSimulator", name="SimpleSubunit"):
        BasicRtlSimModel.__init__(self, sim, name=name)
        # ports
        self.io.a = BasicRtlSimProxy(
            sim, self, "a",
            Bits3t(1, 0), None)
        self.io.b = BasicRtlSimProxy(
            sim, self, "b",
            Bits3t(1, 0), None)
        # internal signals
        self.io.sig_submodule0_a = BasicRtlSimProxy(
            sim, self, "sig_submodule0_a",
            Bits3t(1, 0), None)
        self.io.sig_submodule0_b = BasicRtlSimProxy(
            sim, self, "sig_submodule0_b",
            Bits3t(1, 0), None)
        # component instances
        self.submodule0_inst = submodule0(sim, "submodule0_inst")
    def _init_body(self):
        connectSimPort(self, self.submodule0_inst, "sig_submodule0_a", "a")
        connectSimPort(self, self.submodule0_inst, "sig_submodule0_b", "b")
        self._hwIOs = (
            self.io.a,
            self.io.b,
            self.io.sig_submodule0_a,
            self.io.sig_submodule0_b,
        )
        self._processes = (
            self.assig_process_b,
            self.assig_process_sig_submodule0_a,
        )
        self._subHwModules = (self.submodule0_inst,
        )
        sensitivity(self.assig_process_b, self.io.sig_submodule0_b)
        self._outputs[self.assig_process_b] = (
            self.io.b,
        )
        sensitivity(self.assig_process_sig_submodule0_a, self.io.a)
        self._outputs[self.assig_process_sig_submodule0_a] = (
            self.io.sig_submodule0_a,
        )
        for u in self._subHwModules:
            u._init_body()

    # sensitivity: sig_submodule0_b
    def assig_process_b(self):
        self.io.b.val_next = (self.io.sig_submodule0_b.val, 0, )

    # sensitivity: a
    def assig_process_sig_submodule0_a(self):
        self.io.sig_submodule0_a.val_next = (self.io.a.val, 0, )

